% Solve an Autoregression Time-Series Problem with a NAR Neural Network
% Script generated by NTSTOOL
% Created Wed Feb 18 11:27:48 MST 2015
%
% This script assumes this variable is defined:
%
%   vecsst - feedback time series.

targetSeries = tonndata(Cla,0,0);
% Create a Nonlinear Autoregressive Network
feedbackDelays = 1:5;
hiddenLayerSize = 5;
clanet = narnet(feedbackDelays,hiddenLayerSize);

% Prepare the Data for Training and Simulation
% The function PREPARETS prepares timeseries data for a particular network,
% shifting time by the minimum amount to fill input states and layer states.
% Using PREPARETS allows you to keep your original time series data unchanged, while
% easily customizing it for networks with differing numbers of delays, with
% open loop or closed loop feedback modes.
[inputs,inputStates,layerStates,targets] = preparets(clanet,{},{},targetSeries);

% Setup Division of Data for Training, Validation, Testing
clanet.divideParam.trainRatio = 80/100;
clanet.divideParam.valRatio = 10/100;
clanet.divideParam.testRatio = 10/100;


% Train the Network
[clanet,tr] = train(clanet,inputs,targets,inputStates,layerStates);

% Test the Network
outputs = clanet(inputs,inputStates,layerStates);
errors = gsubtract(targets,outputs);
performance = perform(clanet,targets,outputs);

% View the Network
view(clanet)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotresponse(targets,outputs)
%figure, ploterrcorr(errors)
%figure, plotinerrcorr(inputs,errors)

% Closed Loop Network
% Use this network to do multi-step prediction.
% The function CLOSELOOP replaces the feedback input with a direct
% connection from the outout layer.
modcla = closeloop(clanet);
[xc,xic,aic,tc] = preparets(modcla,{},{},targetSeries);
yc = modcla(xc,xic,aic);
perfc = perform(modcla,tc,yc);

% Early Prediction Network
% For some applications it helps to get the prediction a timestep early.
% The original network returns predicted y(t+1) at the same time it is given y(t+1).
% For some applications such as decision making, it would help to have predicted
% y(t+1) once y(t) is available, but before the actual y(t+1) occurs.
% The network can be made to return its output a timestep early by removing one delay
% so that its minimal tap delay is now 0 instead of 1.  The new network returns the
% same outputs as the original network, but outputs are shifted left one timestep.
nets = removedelay(clanet);
[xs,xis,ais,ts] = preparets(nets,{},{},targetSeries);
ys = nets(xs,xis,ais);
closedLoopPerformance = perform(clanet,tc,yc)
